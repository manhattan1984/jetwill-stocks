// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: neRJon4mvg761ap1WNmssZ
// Component: EK78pK-FoKOrlj

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Button from "../../Button"; // plasmic-import: 5c-bjdNt25XYd-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jetwill_stocks.module.css"; // plasmic-import: neRJon4mvg761ap1WNmssZ/projectcss
import sty from "./PlasmicPriceCard.module.css"; // plasmic-import: EK78pK-FoKOrlj/css

export type PlasmicPriceCard__VariantMembers = {
  primary: "primary";
  borders: "flatLeft" | "flatRight" | "flatCenter";
};
export type PlasmicPriceCard__VariantsArgs = {
  primary?: SingleBooleanChoiceArg<"primary">;
  borders?: MultiChoiceArg<"flatLeft" | "flatRight" | "flatCenter">;
};
type VariantPropType = keyof PlasmicPriceCard__VariantsArgs;
export const PlasmicPriceCard__VariantProps = new Array<VariantPropType>(
  "primary",
  "borders"
);

export type PlasmicPriceCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPriceCard__ArgsType;
export const PlasmicPriceCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4"
);

export type PlasmicPriceCard__OverridesType = {
  root?: p.Flex<"div">;
  reveal?: p.Flex<typeof Reveal>;
  h4?: p.Flex<"h4">;
  img?: p.Flex<typeof p.PlasmicImg>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultPriceCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  primary?: SingleBooleanChoiceArg<"primary">;
  borders?: MultiChoiceArg<"flatLeft" | "flatRight" | "flatCenter">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPriceCard__RenderFunc(props: {
  variants: PlasmicPriceCard__VariantsArgs;
  args: PlasmicPriceCard__ArgsType;
  overrides: PlasmicPriceCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "primary",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.primary
      },
      {
        path: "borders",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.borders
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootborders_flatCenter]: hasVariant(
            $state,
            "borders",
            "flatCenter"
          ),
          [sty.rootborders_flatLeft]: hasVariant($state, "borders", "flatLeft"),
          [sty.rootborders_flatRight]: hasVariant(
            $state,
            "borders",
            "flatRight"
          ),
          [sty.rootprimary]: hasVariant($state, "primary", "primary")
        }
      )}
    >
      <Reveal
        data-plasmic-name={"reveal"}
        data-plasmic-override={overrides.reveal}
        className={classNames("__wab_instance", sty.reveal)}
        triggerOnce={true}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___1WrDi, {
            [sty.freeBoxborders_flatCenter___1WrDiphdr]: hasVariant(
              $state,
              "borders",
              "flatCenter"
            ),
            [sty.freeBoxborders_flatLeft___1WrDiotLwh]: hasVariant(
              $state,
              "borders",
              "flatLeft"
            ),
            [sty.freeBoxborders_flatRight___1WrDi4ZnpT]: hasVariant(
              $state,
              "borders",
              "flatRight"
            ),
            [sty.freeBoxprimary___1WrDIq4Umr]: hasVariant(
              $state,
              "primary",
              "primary"
            )
          })}
        >
          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(projectcss.all, projectcss.h4, sty.h4, {
              [sty.h4borders_flatCenter]: hasVariant(
                $state,
                "borders",
                "flatCenter"
              ),
              [sty.h4borders_flatLeft]: hasVariant(
                $state,
                "borders",
                "flatLeft"
              ),
              [sty.h4borders_flatRight]: hasVariant(
                $state,
                "borders",
                "flatRight"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Pro",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenborders_flatCenter]: hasVariant(
                  $state,
                  "borders",
                  "flatCenter"
                ),
                [sty.slotTargetChildrenborders_flatLeft]: hasVariant(
                  $state,
                  "borders",
                  "flatLeft"
                ),
                [sty.slotTargetChildrenborders_flatRight]: hasVariant(
                  $state,
                  "borders",
                  "flatRight"
                )
              })
            })}
          </h4>
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/jetwill_stocks/images/linePricingpng.png",
              fullWidth: 300,
              fullHeight: 2,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__qk4Vl)}>
              <div className={classNames(projectcss.all, sty.freeBox___50XEa)}>
                {p.renderPlasmicSlot({
                  defaultContents: "20",
                  value: args.slot4,
                  className: classNames(sty.slotTargetSlot4)
                })}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hjJeV
                )}
              >
                {"%"}
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__uIbjt)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yc0ZB
              )}
            >
              {"Minimum Amount:"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tHdz9)}>
              {p.renderPlasmicSlot({
                defaultContents: "$500",
                value: args.slot
              })}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___0OxOu)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__veako
              )}
            >
              {"Maximum Amount:"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ovmvW)}>
              {p.renderPlasmicSlot({
                defaultContents: "$500",
                value: args.slot2
              })}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5Aa8K)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fshRj
              )}
            >
              {"Duration:"}
            </div>
            {p.renderPlasmicSlot({
              defaultContents: "5",
              value: args.slot3
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fFba3
              )}
            >
              {"days"}
            </div>
          </div>
          {(
            hasVariant($state, "borders", "flatRight")
              ? true
              : hasVariant($state, "borders", "flatLeft")
              ? true
              : true
          ) ? (
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button, {
                [sty.buttonborders_flatCenter]: hasVariant(
                  $state,
                  "borders",
                  "flatCenter"
                ),
                [sty.buttonborders_flatLeft]: hasVariant(
                  $state,
                  "borders",
                  "flatLeft"
                ),
                [sty.buttonborders_flatRight]: hasVariant(
                  $state,
                  "borders",
                  "flatRight"
                ),
                [sty.buttonprimary]: hasVariant($state, "primary", "primary")
              })}
              color={
                hasVariant($state, "borders", "flatLeft")
                  ? ("white" as const)
                  : ("blue" as const)
              }
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__rpaxu)}
                  role={"img"}
                />
              }
              link={"/signup" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__h6SqT)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hS4Vk,
                  {
                    [sty.textborders_flatCenter__hS4Vkphdr]: hasVariant(
                      $state,
                      "borders",
                      "flatCenter"
                    ),
                    [sty.textborders_flatLeft__hS4VkotLwh]: hasVariant(
                      $state,
                      "borders",
                      "flatLeft"
                    ),
                    [sty.textborders_flatRight__hS4Vk4ZnpT]: hasVariant(
                      $state,
                      "borders",
                      "flatRight"
                    )
                  }
                )}
              >
                {hasVariant($state, "borders", "flatCenter")
                  ? "Go Become pro"
                  : hasVariant($state, "borders", "flatRight")
                  ? "Everything is yours"
                  : hasVariant($state, "borders", "flatLeft")
                  ? "Claim Free"
                  : "Get Started"}
              </div>
            </Button>
          ) : null}
        </div>
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "reveal", "h4", "img", "button"],
  reveal: ["reveal", "h4", "img", "button"],
  h4: ["h4"],
  img: ["img"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reveal: typeof Reveal;
  h4: "h4";
  img: typeof p.PlasmicImg;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceCard__VariantsArgs;
    args?: PlasmicPriceCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPriceCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPriceCard__ArgProps,
          internalVariantPropNames: PlasmicPriceCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPriceCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceCard";
  } else {
    func.displayName = `PlasmicPriceCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceCard = Object.assign(
  // Top-level PlasmicPriceCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    h4: makeNodeComponent("h4"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPriceCard
    internalVariantProps: PlasmicPriceCard__VariantProps,
    internalArgProps: PlasmicPriceCard__ArgProps
  }
);

export default PlasmicPriceCard;
/* prettier-ignore-end */
