// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: neRJon4mvg761ap1WNmssZ
// Component: x2gLzZtPz2Veq

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 5c-bjdNt25XYd-/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import Section from "../../Section"; // plasmic-import: fkk9W-LekQhxsr/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: Y7EpI0F9GFL0Z-/component
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: hQjPH1QUb8/codeComponent
import PriceCard from "../../PriceCard"; // plasmic-import: EK78pK-FoKOrlj/component
import Testimonial from "../../Testimonial"; // plasmic-import: mnhMDu0qI-/component

import { useScreenVariants as useScreenVariantssihYh5ETgBO3 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sihYH5ETgB_o_3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_jetwill_stocks.module.css"; // plasmic-import: neRJon4mvg761ap1WNmssZ/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: x2gLzZtPz2Veq/css

import IconArrowRightsvgIcon from "./icons/PlasmicIcon__IconArrowRightsvg"; // plasmic-import: AFDHhBB0PAlRdO/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nwveJSMc8f/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: OYxIgRMyo/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: b-njO8RqCo/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: dJ6-kdSBM4/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 8W5AIRo2W/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: b1fleXSqXc/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: DI1h8im0Lq/icon

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  headerHeroSection?: p.Flex<"div">;
  tickerTape?: p.Flex<"div">;
  diagramSection?: p.Flex<typeof Section>;
  ethereumBox?: p.Flex<"div">;
  productSection?: p.Flex<typeof Section>;
  coinList?: p.Flex<"div">;
  productSection2?: p.Flex<typeof Section>;
  bitcoinToday?: p.Flex<"div">;
  youTube?: p.Flex<typeof YouTube>;
  dataFetcher?: p.Flex<typeof Fetcher>;
  priceCard?: p.Flex<typeof PriceCard>;
  aboutSection?: p.Flex<typeof Section>;
};

export interface DefaultHomeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssihYh5ETgBO3()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"headerHeroSection"}
                data-plasmic-override={overrides.headerHeroSection}
                hasGap={true}
                className={classNames(projectcss.all, sty.headerHeroSection)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__c0YQ)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j5C8S)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pHYx)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__mp9Qz
                        )}
                      >
                        {
                          "Invest with confidence and achieve your financial goals."
                        }
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bYpnt
                        )}
                      >
                        {
                          "Join the Jetwill Stocks community today and start investing with confidence. With our expert guidance and personalized service, you'll have everything you need to achieve your financial goals and build the future you've always dreamed of."
                        }
                      </div>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gMuLx
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___5Rnxy
                          )}
                          color={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("blueSmall" as const)
                              : ("blue" as const)
                          }
                          endIcon={
                            (
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <IconArrowRightsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__b3Yyi
                                )}
                                role={"img"}
                              />
                            ) : null
                          }
                          link={"/signup" as const}
                          showEndIcon={true}
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg___38FTl
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tiDc8
                            )}
                          >
                            {"Start Now"}
                          </div>
                        </Button>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__lk87Z
                            )}
                            color={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("blueBorderSmall" as const)
                                : ("blueBorder" as const)
                            }
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ycmag
                                )}
                                role={"img"}
                              />
                            }
                            link={"/contact" as const}
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mBKzg
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cmw0T
                              )}
                            >
                              {"Contact Us"}
                            </div>
                          </Button>
                        ) : null}
                      </p.Stack>
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ci5Px
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__oSwWs
                            )}
                            color={"blueBorder" as const}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__wB31A
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__l7I2D
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Learn More"}
                          </Button>
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__bVVq
                              )}
                              color={"blueBorder" as const}
                              endIcon={
                                <svg
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__lrHio
                                  )}
                                  role={"img"}
                                />
                              }
                              startIcon={
                                <svg
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fHmh3
                                  )}
                                  role={"img"}
                                />
                              }
                            >
                              {"Learn More"}
                            </Button>
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uM3J)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___3Lb2Q)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("0px" as const)
                            : ("661px" as const)
                        }
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={
                          "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80" as const
                        }
                      />
                    </div>
                  </p.Stack>
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ryslj
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Powering with magnificant of Companies"
                        : "Powering with magnificant of Companies"}
                    </div>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ipHl8)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ipRyx)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("170px" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__z09O)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("170px" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__hrUa8)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("170px" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__kTilm)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("170px" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                      />
                    </p.Stack>
                  ) : null}
                </div>
              </p.Stack>
            ) : null}
            <div
              data-plasmic-name={"tickerTape"}
              data-plasmic-override={overrides.tickerTape}
              className={classNames(projectcss.all, sty.tickerTape)}
            >
              <Embed
                className={classNames("__wab_instance", sty.embedHtml__vQgMi)}
                code={
                  '<!-- TradingView Widget BEGIN -->\n<div class="tradingview-widget-container">\n  <div class="tradingview-widget-container__widget"></div>\n  <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/markets/" rel="noopener" target="_blank"><span class="blue-text">Markets today</span></a> by TradingView</div>\n  <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js" async>\n  {\n  "symbols": [\n    {\n      "proName": "FOREXCOM:SPXUSD",\n      "title": "S&P 500"\n    },\n    {\n      "proName": "FOREXCOM:NSXUSD",\n      "title": "US 100"\n    },\n    {\n      "proName": "FX_IDC:EURUSD",\n      "title": "EUR/USD"\n    },\n    {\n      "proName": "BITSTAMP:BTCUSD",\n      "title": "Bitcoin"\n    },\n    {\n      "proName": "BITSTAMP:ETHUSD",\n      "title": "Ethereum"\n    }\n  ],\n  "showSymbolLogo": true,\n  "colorTheme": "light",\n  "isTransparent": false,\n  "displayMode": "adaptive",\n  "locale": "en"\n}\n  </script>\n</div>\n<!-- TradingView Widget END -->' as const
                }
              />
            </div>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__uCfk3)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/jetwill_stocks/images/diagramImgsvg.svg",
                fullWidth: 300,
                fullHeight: 100,
                aspectRatio: 2.987552
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__t9GHf)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"774px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/jetwill_stocks/images/ellipseLeftpng.png",
                fullWidth: 469,
                fullHeight: 742,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__ycPys)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/jetwill_stocks/images/ellipseRightpng.png",
                fullWidth: 437,
                fullHeight: 742,
                aspectRatio: undefined
              }}
            />

            <Section
              data-plasmic-name={"diagramSection"}
              data-plasmic-override={overrides.diagramSection}
              className={classNames("__wab_instance", sty.diagramSection)}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("mobile" as const)
                  : undefined
              }
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal__z3DTt)}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vdYV)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__wHpCx
                    )}
                  >
                    {"Welcome to Jetwill Stocks"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ymqS
                    )}
                  >
                    {
                      "Welcome to Jetwill Stocks, your trusted partner for smart and successful investing in the stock market. Our team of expert brokers is here to help you achieve your financial goals, whether you're a seasoned investor or just getting started. With our personalized service, cutting-edge technology, and comprehensive resources, you'll have everything you need to build your wealth and make informed investment decisions. Join us today and experience the power of the stock market with Jetwill Stocks."
                    }
                  </div>
                  <div
                    data-plasmic-name={"ethereumBox"}
                    data-plasmic-override={overrides.ethereumBox}
                    className={classNames(projectcss.all, sty.ethereumBox)}
                  >
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__lxaJk
                      )}
                      code={
                        '<!-- TradingView Widget BEGIN -->\n<div class="tradingview-widget-container">\n  <div class="tradingview-widget-container__widget"></div>\n  <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/markets/stocks-usa/" rel="noopener" target="_blank"><span class="blue-text">Stocks today</span></a> by TradingView</div>\n  <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-hotlists.js" async>\n  {\n  "colorTheme": "light",\n  "dateRange": "12M",\n  "exchange": "US",\n  "showChart": true,\n  "locale": "en",\n  "largeChartUrl": "",\n  "isTransparent": false,\n  "showSymbolLogo": false,\n  "showFloatingTooltip": false,\n  "width": "400",\n  "height": "600",\n  "plotLineColorGrowing": "rgba(41, 98, 255, 1)",\n  "plotLineColorFalling": "rgba(41, 98, 255, 1)",\n  "gridLineColor": "rgba(240, 243, 250, 0)",\n  "scaleFontColor": "rgba(106, 109, 120, 1)",\n  "belowLineFillColorGrowing": "rgba(41, 98, 255, 0.12)",\n  "belowLineFillColorFalling": "rgba(41, 98, 255, 0.12)",\n  "belowLineFillColorGrowingBottom": "rgba(41, 98, 255, 0)",\n  "belowLineFillColorFallingBottom": "rgba(41, 98, 255, 0)",\n  "symbolActiveColor": "rgba(41, 98, 255, 0.12)"\n}\n  </script>\n</div>\n<!-- TradingView Widget END -->' as const
                      }
                    />
                  </div>
                </div>
              </Reveal>
            </Section>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__icCa4)}
              triggerOnce={true}
            >
              <Section
                data-plasmic-name={"productSection"}
                data-plasmic-override={overrides.productSection}
                className={classNames("__wab_instance", sty.productSection)}
                size={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("mobile" as const)
                    : undefined
                }
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___8QQhm)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__yoNpH
                    )}
                  >
                    {"Why choose Jetwill Stocks"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nyIVs
                    )}
                  >
                    {
                      "Whether you're looking to build a diverse portfolio, trade stocks, or manage your investments, Jetwill Stocks has everything you need to succeed. From cutting-edge trading platforms and research tools to personalized advice and expert guidance, we're here to help you every step of the way."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__s4KK9)}
                    color={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("blue" as const)
                        : ("blue" as const)
                    }
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__zGkQf)}
                        role={"img"}
                      />
                    }
                    link={"/signup" as const}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__mDHvK)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3A1Y1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Get Started"
                        : "Get Started"}
                    </div>
                  </Button>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tzDgt)}
                  >
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__jm8N
                      )}
                      slot={
                        " Our team of experienced brokers provides personalized guidance and advice to help you make informed investment decisions."
                      }
                      slot2={
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__jtX9)}
                          role={"img"}
                        />
                      }
                    >
                      {"Expert Guidance"}
                    </ProductCard>
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__ocCj
                      )}
                      slot={
                        "Jetwill Stocks offers a wide range of tools and resources, including research reports, trading platforms, and educational resources, to help you succeed in the stock market."
                      }
                      slot2={
                        <Icon2Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1TVEj
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {"Comprehensive Resources"}
                    </ProductCard>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ltuO)}
                  >
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard___85V44
                      )}
                      slot={
                        "We offer competitive pricing and fees, so you can invest with confidence and maximize your returns."
                      }
                      slot2={
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__lZfev)}
                          role={"img"}
                        />
                      }
                    >
                      {"Competitive Pricing"}
                    </ProductCard>
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__tejJi
                      )}
                      slot={
                        " Jetwill Stocks uses the latest technology to provide you with fast, reliable, and secure access to the stock market."
                      }
                      slot2={
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9NUBi
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {"Cutting-edge Technology"}
                    </ProductCard>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eGtsw)}
                  >
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__tQuIl
                      )}
                      slot={
                        "We believe in building strong relationships with our clients and providing personalized service that meets your unique needs and goals."
                      }
                      slot2={
                        <Icon5Icon
                          className={classNames(projectcss.all, sty.svg__hvWjr)}
                          role={"img"}
                        />
                      }
                    >
                      {"Personalized Service"}
                    </ProductCard>
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__pMd2C
                      )}
                      slot={
                        " Jetwill Stocks uses the latest technology to provide you with fast, reliable, and secure access to the stock market."
                      }
                      slot2={
                        <Icon6Icon
                          className={classNames(projectcss.all, sty.svg__klIas)}
                          role={"img"}
                        />
                      }
                    >
                      {"Diverse Investment Options"}
                    </ProductCard>
                  </p.Stack>
                </div>
              </Section>
            </Reveal>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__fovku)}
              triggerOnce={true}
            >
              <div
                data-plasmic-name={"coinList"}
                data-plasmic-override={overrides.coinList}
                className={classNames(projectcss.all, sty.coinList)}
              >
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__tPVi9)}
                  code={
                    '<!-- TradingView Widget BEGIN -->\n<div class="tradingview-widget-container">\n  <div class="tradingview-widget-container__widget"></div>\n  <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/markets/cryptocurrencies/prices-all/" rel="noopener" target="_blank"><span class="blue-text">Crypto markets</span></a> by TradingView</div>\n  <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-screener.js" async>\n  {\n  "width": 1000,\n  "height": 490,\n  "defaultColumn": "overview",\n  "screener_type": "crypto_mkt",\n  "displayCurrency": "USD",\n  "colorTheme": "light",\n  "locale": "en"\n}\n  </script>\n</div>\n<!-- TradingView Widget END -->' as const
                  }
                />
              </div>
            </Reveal>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__t3Fmn)}
              triggerOnce={true}
            >
              <Section
                data-plasmic-name={"productSection2"}
                data-plasmic-override={overrides.productSection2}
                className={classNames("__wab_instance", sty.productSection2)}
                size={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("mobile" as const)
                    : undefined
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__dWoNb)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__txBqU
                    )}
                  >
                    {"How it works"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cCspy
                    )}
                  >
                    {
                      "Ready to get started? Sign up for a free consultation with one of our expert brokers today and start investing with confidence. Thank you for choosing Jetwill Stocks."
                    }
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2JQEl)}
                  >
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard___64AkK
                      )}
                      slot={null}
                      slot2={
                        <Icon5Icon
                          className={classNames(projectcss.all, sty.svg__hYcKy)}
                          role={"img"}
                        />
                      }
                    >
                      {"Create an account"}
                    </ProductCard>
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard___90Y76
                      )}
                      slot={null}
                      slot2={
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__c02Ll)}
                          role={"img"}
                        />
                      }
                    >
                      {"Make payments"}
                    </ProductCard>
                    <ProductCard
                      className={classNames(
                        "__wab_instance",
                        sty.productCard__kMoQn
                      )}
                      slot={null}
                      slot2={
                        <Icon7Icon
                          className={classNames(projectcss.all, sty.svg__xnNlI)}
                          role={"img"}
                        />
                      }
                    >
                      {"Start Investing"}
                    </ProductCard>
                  </p.Stack>
                </div>
              </Section>
            </Reveal>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__dDkOd)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___53J7T)}
              >
                <div
                  data-plasmic-name={"bitcoinToday"}
                  data-plasmic-override={overrides.bitcoinToday}
                  className={classNames(projectcss.all, sty.bitcoinToday)}
                >
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__oy2Wd
                    )}
                    code={
                      '<!-- TradingView Widget BEGIN -->\n<div class="tradingview-widget-container">\n  <div class="tradingview-widget-container__widget"></div>\n  <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/key-events/" rel="noopener" target="_blank"><span class="blue-text">Daily news roundup</span></a> by TradingView</div>\n  <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-timeline.js" async>\n  {\n  "feedMode": "all_symbols",\n  "colorTheme": "light",\n  "isTransparent": false,\n  "displayMode": "regular",\n  "width": 480,\n  "height": 830,\n  "locale": "en"\n}\n  </script>\n</div>\n<!-- TradingView Widget END -->' as const
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xIj9)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__qbtIo
                    )}
                  >
                    {"Guaranteed Daily Profits"}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2HnN
                    )}
                  >
                    {
                      "As a Jetwill Stocks client, you'll have access to a wide range of services and resources designed to help you make informed investment decisions. Whether you're a seasoned investor or just getting started, we're here to help you succeed."
                    }
                  </div>
                </div>
              </p.Stack>
            </Reveal>
            <YouTube
              data-plasmic-name={"youTube"}
              data-plasmic-override={overrides.youTube}
              className={classNames("__wab_instance", sty.youTube)}
              videoId={"GmOzih6I1zs" as const}
            />

            <div className={classNames(projectcss.all, sty.freeBox__qfDh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gahAx
                )}
              >
                {"OUR PLANS"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eYmqw
                )}
              >
                {
                  "Note: We get 10% commission fee from the profit at the end of trade"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dAcml)}>
                <Fetcher
                  data-plasmic-name={"dataFetcher"}
                  data-plasmic-override={overrides.dataFetcher}
                  className={classNames("__wab_instance", sty.dataFetcher)}
                  dataOp={{
                    sourceId: "h1sK3MaNKrVUwjue9VNXsM",
                    opId: "69c163ac-7217-46ad-8bad-bfeb54aeb735",
                    userArgs: {},
                    cacheKey: "plasmic.$.bVzsVor5j.$.",
                    invalidatedKeys: ["plasmic_refresh_all"],
                    roleId: null
                  }}
                  queries={$queries}
                >
                  {($queries: any) =>
                    (
                      (() => {
                        try {
                          return $queries.data.data;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <PriceCard
                        data-plasmic-name={"priceCard"}
                        data-plasmic-override={overrides.priceCard}
                        className={classNames("__wab_instance", sty.priceCard)}
                        key={currentIndex}
                        slot={(() => {
                          try {
                            return currentItem.minimum.toLocaleString("en-US", {
                              style: "currency",
                              currency: "USD"
                            });
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "$500";
                            }
                            throw e;
                          }
                        })()}
                        slot2={(() => {
                          try {
                            return (+currentItem.maximum).toLocaleString(
                              "en-US",
                              {
                                style: "currency",
                                currency: "USD"
                              }
                            );
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "$500";
                            }
                            throw e;
                          }
                        })()}
                        slot3={(() => {
                          try {
                            return currentItem.duration;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "5";
                            }
                            throw e;
                          }
                        })()}
                        slot4={(() => {
                          try {
                            return currentItem.interest;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "20";
                            }
                            throw e;
                          }
                        })()}
                      >
                        {(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Pro";
                            }
                            throw e;
                          }
                        })()}
                      </PriceCard>
                    ))
                  }
                </Fetcher>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__tc0H3)}
                  triggerOnce={true}
                >
                  <Section
                    data-plasmic-name={"aboutSection"}
                    data-plasmic-override={overrides.aboutSection}
                    background={"dark" as const}
                    className={classNames("__wab_instance", sty.aboutSection)}
                    size={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("mobile" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dBIi)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__x0Gge
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "What people say \nabout us"
                          : "What people say about us"}
                      </h2>
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__awRIr
                          )}
                        >
                          <Testimonial
                            className={classNames(
                              "__wab_instance",
                              sty.testimonial__nu1Qr
                            )}
                            slot={"James Michaelson"}
                            slot2={"Trader"}
                            slot3={
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__kuGwk)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("150px" as const)
                                    : ("200px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("150px" as const)
                                    : ("200px" as const)
                                }
                                loading={"lazy" as const}
                                src={
                                  "https://images.unsplash.com/photo-1562788869-4ed32648eb72?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1472&q=80" as const
                                }
                              />
                            }
                          >
                            {
                              "I had never invested in the stock market before, but Jetwill Stocks made the process easy and accessible. Their educational resources and personalized guidance helped me understand the basics of investing and build a portfolio that aligned with my financial goals. I appreciate their commitment to transparency and competitive pricing, which makes it easy to invest with confidence."
                            }
                          </Testimonial>
                          <Testimonial
                            className={classNames(
                              "__wab_instance",
                              sty.testimonial___5Slyz
                            )}
                            slot={"Sarah Paul"}
                            slot2={"Investor"}
                            slot3={
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__pLxCk)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("150px" as const)
                                    : ("200px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("150px" as const)
                                    : ("200px" as const)
                                }
                                loading={"lazy" as const}
                                src={
                                  "https://images.unsplash.com/photo-1655249493799-9cee4fe983bb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80" as const
                                }
                              />
                            }
                          >
                            {
                              "I've been investing with Jetwill Stocks for several years now, and I'm consistently impressed by their level of service and expertise. They have helped me navigate market fluctuations and make informed investment decisions that have paid off in the long run. I appreciate their commitment to building strong relationships with their clients and providing personalized service that meets my unique needs."
                            }
                          </Testimonial>
                          <Testimonial
                            className={classNames(
                              "__wab_instance",
                              sty.testimonial__lAwd
                            )}
                            slot={"Alan James"}
                            slot2={"Investor"}
                            slot3={
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___7TYx4)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("150px" as const)
                                    : ("200px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("150px" as const)
                                    : ("200px" as const)
                                }
                                loading={"lazy" as const}
                                src={
                                  "https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80" as const
                                }
                              />
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hvxhc
                              )}
                            >
                              {
                                "I've been with Jetwill Stocks for over a year now, and I'm blown away by the level of service and support they provide. Their team of brokers is incredibly knowledgeable and always willing to help, whether it's answering questions or providing guidance on investment decisions. With their cutting-edge technology and comprehensive resources, I feel confident and empowered as an investor."
                              }
                            </div>
                          </Testimonial>
                        </p.Stack>
                      ) : null}
                    </div>
                  </Section>
                </Reveal>
              ) : null}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___8W40E)}>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml___5WF6H)}
                code={
                  '<!-- TradingView Widget BEGIN -->\n<div class="tradingview-widget-container">\n  <div class="tradingview-widget-container__widget"></div>\n  <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/symbols/BTCUSD/?exchange=BITSTAMP" rel="noopener" target="_blank"><span class="blue-text">Bitcoin price</span></a> by TradingView</div>\n  <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js" async>\n  {\n  "symbols": [\n    [\n      "BITSTAMP:BTCUSD|1D"\n    ]\n  ],\n  "chartOnly": false,\n  "width": 1000,\n  "height": 500,\n  "locale": "en",\n  "colorTheme": "light",\n  "autosize": false,\n  "showVolume": false,\n  "showMA": false,\n  "hideDateRanges": false,\n  "hideMarketStatus": false,\n  "hideSymbolLogo": false,\n  "scalePosition": "right",\n  "scaleMode": "Normal",\n  "fontFamily": "-apple-system, BlinkMacSystemFont, Trebuchet MS, Roboto, Ubuntu, sans-serif",\n  "fontSize": "10",\n  "noTimeScale": false,\n  "valuesTracking": "1",\n  "changeMode": "price-and-percent",\n  "chartType": "area",\n  "maLineColor": "#2962FF",\n  "maLineWidth": 1,\n  "maLength": 9,\n  "lineWidth": 2,\n  "lineType": 0\n}\n  </script>\n</div>\n<!-- TradingView Widget END -->' as const
                }
              />
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "tickerTape",
    "diagramSection",
    "ethereumBox",
    "productSection",
    "coinList",
    "productSection2",
    "bitcoinToday",
    "youTube",
    "dataFetcher",
    "priceCard",
    "aboutSection"
  ],
  headerHeroSection: ["headerHeroSection"],
  tickerTape: ["tickerTape"],
  diagramSection: ["diagramSection", "ethereumBox"],
  ethereumBox: ["ethereumBox"],
  productSection: ["productSection"],
  coinList: ["coinList"],
  productSection2: ["productSection2"],
  bitcoinToday: ["bitcoinToday"],
  youTube: ["youTube"],
  dataFetcher: ["dataFetcher", "priceCard"],
  priceCard: ["priceCard"],
  aboutSection: ["aboutSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  tickerTape: "div";
  diagramSection: typeof Section;
  ethereumBox: "div";
  productSection: typeof Section;
  coinList: "div";
  productSection2: typeof Section;
  bitcoinToday: "div";
  youTube: typeof YouTube;
  dataFetcher: typeof Fetcher;
  priceCard: typeof PriceCard;
  aboutSection: typeof Section;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    tickerTape: makeNodeComponent("tickerTape"),
    diagramSection: makeNodeComponent("diagramSection"),
    ethereumBox: makeNodeComponent("ethereumBox"),
    productSection: makeNodeComponent("productSection"),
    coinList: makeNodeComponent("coinList"),
    productSection2: makeNodeComponent("productSection2"),
    bitcoinToday: makeNodeComponent("bitcoinToday"),
    youTube: makeNodeComponent("youTube"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    priceCard: makeNodeComponent("priceCard"),
    aboutSection: makeNodeComponent("aboutSection"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
